// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.DbContext;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524144759_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("article");

                    b.Property<string>("Body")
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int?>("BodyFileId")
                        .HasMaxLength(255)
                        .HasColumnType("integer")
                        .HasColumnName("body_id");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("request_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("tags");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BodyFileId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.HasKey("Id");

                    b.ToTable("files");
                });

            modelBuilder.Entity("WebApplication1.Models.Profile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FieldOfExpertise")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("field_of_expertise");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Institution")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("institution");

                    b.Property<int?>("ProfilePicId")
                        .HasMaxLength(255)
                        .HasColumnType("integer")
                        .HasColumnName("profile_pic_id");

                    b.HasKey("UserId");

                    b.HasIndex("ProfilePicId")
                        .IsUnique();

                    b.ToTable("profile");
                });

            modelBuilder.Entity("WebApplication1.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer")
                        .HasColumnName("article_id");

                    b.Property<int?>("AttachmentsId")
                        .HasMaxLength(255)
                        .HasColumnType("integer")
                        .HasColumnName("attachments_id");

                    b.Property<string>("CommentsToAuthor")
                        .HasColumnType("text")
                        .HasColumnName("comments_to_author");

                    b.Property<DateTime?>("CompleteDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("complete_date");

                    b.Property<string>("ConfidentialComments")
                        .HasColumnType("text")
                        .HasColumnName("confidential_comments");

                    b.Property<string>("Decision")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("decision");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<string>("Originality")
                        .HasColumnType("text")
                        .HasColumnName("originality");

                    b.Property<string>("PresentationQuality")
                        .HasColumnType("text")
                        .HasColumnName("presentation_quality");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("TechnicalMerit")
                        .HasColumnType("text")
                        .HasColumnName("technical_merit");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .IsUnique();

                    b.HasIndex("AttachmentsId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("reviews");
                });

            modelBuilder.Entity("WebApplication1.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("WebApplication1.Models.Article", b =>
                {
                    b.HasOne("WebApplication1.Models.File", "ArticleFile")
                        .WithOne("Article")
                        .HasForeignKey("WebApplication1.Models.Article", "BodyFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApplication1.Models.Profile", "Profile")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArticleFile");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebApplication1.Models.Profile", b =>
                {
                    b.HasOne("WebApplication1.Models.File", "ProfilePicture")
                        .WithOne("Profile")
                        .HasForeignKey("WebApplication1.Models.Profile", "ProfilePicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApplication1.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("WebApplication1.Models.Profile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfilePicture");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.Models.Review", b =>
                {
                    b.HasOne("WebApplication1.Models.Article", "Article")
                        .WithOne("Review")
                        .HasForeignKey("WebApplication1.Models.Review", "ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Models.File", "Attachment")
                        .WithOne("Review")
                        .HasForeignKey("WebApplication1.Models.Review", "AttachmentsId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WebApplication1.Models.Profile", "Profile")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Attachment");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.HasOne("WebApplication1.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApplication1.Models.Article", b =>
                {
                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.File", b =>
                {
                    b.Navigation("Article")
                        .IsRequired();

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("Review")
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Models.Profile", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebApplication1.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication1.Models.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
